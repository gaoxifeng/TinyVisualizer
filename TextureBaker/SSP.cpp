#include "SSP.h"
#include <iostream>

namespace DRAWER {
SSP::SSP(const PatchDeformer& deformer,std::shared_ptr<Texture> tex,T texelSize) {
  reset(deformer._vss0,deformer._tss0,tex,deformer._iss,texelSize);
}
SSP::SSP(const DVec& vss0,const DVec& tss0,std::shared_ptr<Texture> tex,
         const std::vector<Eigen::Matrix<int,3,1>>& iss0,T texelSize) {
  reset(vss0,tss0,tex,iss0,texelSize);
}
SSP::T SSP::energy(const DVec& vss,DVec* grad,SMat* hess,bool areaScaled) const {
  Grad fi;
  Hess hi;
  Trips trips;
  T e=0;
  if(grad)
    grad->setZero(vss.size());
  for(int i=0; i<(int)_JHTJHss.size(); i++) {
    if(areaScaled)
      e+=energyAreaScaled(vss,_iss[i],_JHTJHss[i],grad?&fi:NULL,hess?&hi:NULL);
    else e+=energy(vss,_iss[i],_JHTJHss[i],grad?&fi:NULL,hess?&hi:NULL);
    if(grad)
      PatchDeformer::addStructuredBlock(*grad,_iss[i],fi);
    if(hess)
      PatchDeformer::addStructuredBlock(trips,_iss[i],hi);
  }
  if(hess) {
    hess->resize(vss.size(),vss.size());
    hess->setFromTriplets(trips.begin(),trips.end());
  }
  return e;
}
void SSP::debug(T DELTA) const {
  {
    Hess hess;
    Grad grad,grad2;
    F H=F::Random();
    DVec vss=DVec::Random(6),dvss=DVec::Random(6);
    T e0=energy(vss,Eigen::Matrix<int,3,1>(0,1,2),H,&grad,&hess);
    T e1=energy(vss+dvss*DELTA,Eigen::Matrix<int,3,1>(0,1,2),H,&grad2,NULL);
    std::cout << "SSP gradient: " << grad.dot(dvss) << " error: " << grad.dot(dvss)-(e1-e0)/DELTA << std::endl;
    std::cout << "SSP hessian: " << (hess*dvss).norm() << " error: " << (hess*dvss-(grad2-grad)/DELTA).norm() << std::endl;
  }
  {
    Hess hess;
    Grad grad,grad2;
    F H=F::Random();
    DVec vss=DVec::Random(6),dvss=DVec::Random(6);
    T e0=energyAreaScaled(vss,Eigen::Matrix<int,3,1>(0,1,2),H,&grad,&hess);
    T e1=energyAreaScaled(vss+dvss*DELTA,Eigen::Matrix<int,3,1>(0,1,2),H,&grad2,NULL);
    std::cout << "SSPAreaScaled gradient: " << grad.dot(dvss) << " error: " << grad.dot(dvss)-(e1-e0)/DELTA << std::endl;
    std::cout << "SSPAreaScaled hessian: " << (hess*dvss).norm() << " error: " << (hess*dvss-(grad2-grad)/DELTA).norm() << std::endl;
  }
  {
    SMat hess;
    DVec grad,grad2;
    DVec vss=_vss0,dvss=DVec::Random(_vss0.size());
    T e0=energy(vss,&grad,&hess);
    T e1=energy(vss+dvss*DELTA,&grad2,NULL);
    std::cout << "SSP gradient: " << grad.dot(dvss) << " error: " << grad.dot(dvss)-(e1-e0)/DELTA << std::endl;
    std::cout << "SSP hessian: " << (hess*dvss).norm() << " error: " << (hess*dvss-(grad2-grad)/DELTA).norm() << std::endl;
  }
}
//helper
void SSP::reset(const DVec& vss0,const DVec& tss0,std::shared_ptr<Texture> tex,
                const std::vector<Eigen::Matrix<int,3,1>>& iss0,T texelSize) {
  tex->loadCPUData();
  _vss0=vss0;
  _iss=iss0;
  _JHTJHss.resize(iss0.size());
  for(int i=0; i<(int)_JHTJHss.size(); i++) {
    Vert2 v[3],t[3];
    for(int d=0; d<3; d++) {
      v[d]=vss0.segment<2>(iss0[i][d]*2);
      t[d]=tss0.segment<2>(iss0[i][d]*2);
    }

    F f;
    f.col(0)=v[1]-v[0];
    f.col(1)=v[2]-v[0];
    T area=abs(f.determinant());
    T len=std::max(std::max((v[0]-v[1]).norm(),(v[0]-v[2]).norm()),(v[1]-v[2]).norm());
    _JHTJHss[i]=computeJHTJH(t,tex,len,texelSize)*area;
  }
}
SSP::F SSP::computeJHTJH(const Vert2 t[3],std::shared_ptr<Texture> tex,T len,T texelSize) const {
  if(len<texelSize) {
    FFlat c[3]= {tex->getData(t[0]),tex->getData(t[1]),tex->getData(t[2])};
    Eigen::Matrix<T,4,2> JH;
    JH.col(0)=c[1]-c[0];
    JH.col(1)=c[2]-c[0];
    return JH.transpose()*JH;
  } else {
    len/=2;
    Vert2 t01=(t[0]+t[1])/2;
    Vert2 t12=(t[1]+t[2])/2;
    Vert2 t02=(t[0]+t[2])/2;

    F ret=F::Zero();
    {
      Vert2 tsub[3]= {t[0],t01,t02};
      ret+=computeJHTJH(tsub,tex,len,texelSize);
    }
    {
      Vert2 tsub[3]= {t01,t[1],t12};
      ret+=computeJHTJH(tsub,tex,len,texelSize);
    }
    {
      Vert2 tsub[3]= {t02,t12,t[2]};
      ret+=computeJHTJH(tsub,tex,len,texelSize);
    }
    {
      Vert2 tsub[3]= {t01,t12,t02};
      ret+=computeJHTJH(tsub,tex,len,texelSize);
    }
    return ret/4;
  }
}
SSP::T SSP::energy(const DVec& vss,const Eigen::Matrix<int,3,1>& iss,const F H,Grad* grad,Hess* hess) const {
  T h[2][2];
  h[0][0]=H(0,0);
  h[0][1]=H(0,1);
  h[1][0]=H(1,0);
  h[1][1]=H(1,1);
  return energy(vss.segment<2>(iss[0]*2),vss.segment<2>(iss[1]*2),vss.segment<2>(iss[2]*2),h,grad,hess);
}
SSP::T SSP::energy(const Vert2& a,const Vert2& b,const Vert2& c,const T H[2][2],Grad* grad,Hess* hess) const {
  T x0=-a[0];
  T x1=b[0] + x0;
  T x2=a[0]*b[1] - a[0]*c[1] - a[1]*b[0] + a[1]*c[0] + b[0]*c[1] - b[1]*c[0];
  T x3=1.0/x2;
  T x4=-c[0];
  T x5=a[0] + x4;
  T x6=H[0][1]*x3;
  T x7=H[1][1]*x3;
  T x8=x1*x7 + x5*x6;
  T x9=x3*x8;
  T x10=H[0][0]*x3;
  T x11=H[1][0]*x3;
  T x12=x1*x11 + x10*x5;
  T x13=x12*x3;
  T x14=-a[1];
  T x15=c[1] + x14;
  T x16=-b[1];
  T x17=a[1] + x16;
  T x18=x10*x15 + x11*x17;
  T x19=x18*x3;
  T x20=x15*x6 + x17*x7;
  T x21=x20*x3;
  T x22=pow(x2, -2);
  T x23=c[1] + x16;
  T x24=x22*x23;
  T x25=x24*x8;
  T x26=x12*x24;
  T x27=x18*x24;
  T x28=x20*x24;
  T x29=H[0][0]*x24;
  T x30=H[1][0]*x24;
  T x31=x15*x29 + x17*x30;
  T x32=x3*x31;
  T x33=H[0][1]*x24;
  T x34=H[1][1]*x24;
  T x35=x15*x33 + x17*x34;
  T x36=x3*x35;
  T x37=-x7;
  T x38=x1*x34 + x33*x5 + x37 + x6;
  T x39=x3*x38;
  T x40=-x11;
  T x41=x1*x30 + x10 + x29*x5 + x40;
  T x42=x3*x41;
  T x43=b[0] + x4;
  T x44=x22*x43;
  T x45=x44*x8;
  T x46=x12*x44;
  T x47=x18*x44;
  T x48=x20*x44;
  T x49=H[0][1]*x44;
  T x50=H[1][1]*x44;
  T x51=x1*x50 + x49*x5;
  T x52=x3*x51;
  T x53=H[0][0]*x44;
  T x54=H[1][0]*x44;
  T x55=x1*x54 + x5*x53;
  T x56=x3*x55;
  T x57=-x10;
  T x58=x11 + x15*x53 + x17*x54 + x57;
  T x59=x3*x58;
  T x60=-x6;
  T x61=x15*x49 + x17*x50 + x60 + x7;
  T x62=x3*x61;
  T x63=a[1] - c[1];
  T x64=x22*x63;
  T x65=x64*x8;
  T x66=x12*x64;
  T x67=x18*x64;
  T x68=x20*x64;
  T x69=H[0][0]*x64;
  T x70=H[1][0]*x64;
  T x71=x15*x69 + x17*x70;
  T x72=x3*x71;
  T x73=H[0][1]*x64;
  T x74=H[1][1]*x64;
  T x75=x15*x73 + x17*x74;
  T x76=x3*x75;
  T x77=x1*x74 + x5*x73 + x7;
  T x78=x3*x77;
  T x79=x1*x70 + x11 + x5*x69;
  T x80=x3*x79;
  T x81=c[0] + x0;
  T x82=x22*x8;
  T x83=x1*x82;
  T x84=x12*x22;
  T x85=x81*x84;
  T x86=x18*x22;
  T x87=x15*x86;
  T x88=x20*x22;
  T x89=x17*x88;
  T x90=H[0][1]*x22;
  T x91=x81*x90;
  T x92=H[1][1]*x22;
  T x93=x1*x92;
  T x94=x5*x91 + x81*x93;
  T x95=x3*x94;
  T x96=H[0][0]*x22;
  T x97=x81*x96;
  T x98=H[1][0]*x22;
  T x99=x1*x98;
  T x100=x5*x97 + x81*x99;
  T x101=x100*x3;
  T x102=x81*x98;
  T x103=x102*x17 + x15*x97 + x40;
  T x104=x103*x3;
  T x105=x15*x90;
  T x106=x17*x92;
  T x107=x105*x81 + x106*x81 + x37;
  T x108=x107*x3;
  T x109=b[1] + x14;
  T x110=x5*x84;
  T x111=x15*x96;
  T x112=x17*x98;
  T x113=x109*x111 + x109*x112;
  T x114=x113*x3;
  T x115=x105*x109 + x106*x109;
  T x116=x115*x3;
  T x117=x5*x90;
  T x118=x109*x117 + x109*x93 + x60;
  T x119=x118*x3;
  T x120=x5*x96;
  T x121=x109*x120 + x109*x99 + x57;
  T x122=x121*x3;
  T x123=a[0] - b[0];
  T x124=x117*x123 + x123*x93;
  T x125=x124*x3;
  T x126=x120*x123 + x123*x99;
  T x127=x126*x3;
  T x128=x10 + x111*x123 + x112*x123;
  T x129=x128*x3;
  T x130=x105*x123 + x106*x123 + x6;
  T x131=x130*x3;
  T x132=pow(x2, -3);
  T x133=2*b[1];
  T x134=2*c[1];
  T x135=x132*(-x133 + x134);
  T x136=x135*x23;
  T x137=x1*x136;
  T x138=x12*x5;
  T x139=x136*x15;
  T x140=x136*x17;
  T x141=x15*x31;
  T x142=2*x24;
  T x143=x17*x35;
  T x144=x15*x3;
  T x145=H[0][1]*x136;
  T x146=x17*x3;
  T x147=x1*x38;
  T x148=x41*x5;
  T x149=x1*x3;
  T x150=H[0][0]*x5;
  T x151=x3*x5;
  T x152=x135*x43;
  T x153=x1*x152;
  T x154=-x54;
  T x155=x154 + x53;
  T x156=H[0][1]*x152;
  T x157=x152*x17;
  T x158=-x33;
  T x159=x158 + x34;
  T x160=-x50;
  T x161=x160 + x49;
  T x162=x15*x152;
  T x163=-x29;
  T x164=x163 + x30;
  T x165=x24*x5;
  T x166=x17*x24;
  T x167=x1*x24;
  T x168=x15*x24;
  T x169=x141*x44 + x143*x44 + x147*x44 + x148*x44 + x165*x55 + x166*x61 + x167*x51 + x168*x58 - x27 + x28 - x32 + x36 - x45 + x46 - x52 + x56;
  T x170=x135*x63;
  T x171=x1*x170;
  T x172=-x70;
  T x173=x172 + x30 + x69;
  T x174=H[0][1]*x170;
  T x175=x17*x170;
  T x176=-x74;
  T x177=x176 + x34 + x73;
  T x178=x15*x170;
  T x179=x141*x64 + x143*x64 + x147*x64 + x148*x64 + x165*x79 + x166*x75 + x167*x77 + x168*x71 + x25 + x39 - x65 + x66 - x78 + x80;
  T x180=x135*x81;
  T x181=x1*x180;
  T x182=-x120 - x99;
  T x183=-x102 + x182 + x97;
  T x184=H[0][1]*x180;
  T x185=x17*x180;
  T x186=-x105 - x106;
  T x187=x186 - x34;
  T x188=x81*x92;
  T x189=-x117 - x93;
  T x190=-x188 + x189 + x91;
  T x191=x15*x180;
  T x192=-x111 - x112;
  T x193=x192 - x30;
  T x194=x81*x82;
  T x195=x22*x81;
  T x196=-x110 - x83 - x87 - x89;
  T x197=x100*x165 + x101 + x103*x168 + x107*x166 + x141*x195 + x143*x195 + x147*x195 + x148*x195 + x167*x94 - x194 + x196 - x28 - x36 + x85 - x95;
  T x198=x109*x135;
  T x199=x1*x198;
  T x200=x109*x96;
  T x201=x109*x98;
  T x202=-x201;
  T x203=x163 + x200 + x202;
  T x204=H[0][1]*x198;
  T x205=x17*x198;
  T x206=x109*x90;
  T x207=x109*x92;
  T x208=-x207;
  T x209=x158 + x206 + x208;
  T x210=x15*x198;
  T x211=x109*x84;
  T x212=x109*x82;
  T x213=x109*x22;
  T x214=x113*x168 + x115*x166 + x118*x167 - x119 + x121*x165 + x122 + x141*x213 + x143*x213 + x147*x213 + x148*x213 + x211 - x212 - x26 - x42;
  T x215=x123*x135;
  T x216=x1*x215;
  T x217=x123*x98;
  T x218=-x217;
  T x219=x123*x96;
  T x220=x120 + x99;
  T x221=x218 + x219 + x220;
  T x222=H[0][1]*x215;
  T x223=x17*x215;
  T x224=x105 + x106;
  T x225=x224 + x33;
  T x226=x123*x92;
  T x227=-x226;
  T x228=x123*x90;
  T x229=x117 + x93;
  T x230=x227 + x228 + x229;
  T x231=x15*x215;
  T x232=x111 + x112;
  T x233=x232 + x29;
  T x234=x123*x84;
  T x235=x123*x82;
  T x236=x123*x22;
  T x237=x110 + x83 + x87 + x89;
  T x238=x124*x167 - x125 + x126*x165 + x127 + x128*x168 + x130*x166 + x141*x236 + x143*x236 + x147*x236 + x148*x236 + x234 - x235 + x237 + x27 + x32;
  T x239=2*b[0];
  T x240=2*c[0];
  T x241=x132*(x239 - x240);
  T x242=x23*x241;
  T x243=x1*x242;
  T x244=H[0][1]*x242;
  T x245=x17*x242;
  T x246=x15*x242;
  T x247=x241*x43;
  T x248=x1*x247;
  T x249=x15*x247;
  T x250=x17*x247;
  T x251=x1*x51;
  T x252=2*x44;
  T x253=x5*x55;
  T x254=H[0][1]*x247;
  T x255=x15*x58;
  T x256=x17*x61;
  T x257=x241*x63;
  T x258=x1*x257;
  T x259=x220 + x54;
  T x260=H[0][1]*x257;
  T x261=x17*x257;
  T x262=-x73;
  T x263=x224 + x262 + x74;
  T x264=x229 + x50;
  T x265=x15*x257;
  T x266=-x69;
  T x267=x232 + x266 + x70;
  T x268=x44*x5;
  T x269=x17*x44;
  T x270=x1*x44;
  T x271=x15*x44;
  T x272=x237 + x251*x64 + x253*x64 + x255*x64 + x256*x64 + x268*x79 + x269*x75 + x270*x77 + x271*x71 + x45 + x52 - x67 + x68 - x72 + x76;
  T x273=x241*x81;
  T x274=x1*x273;
  T x275=H[0][1]*x273;
  T x276=x17*x273;
  T x277=-x91;
  T x278=x160 + x188 + x277;
  T x279=x15*x273;
  T x280=-x97;
  T x281=x102 + x154 + x280;
  T x282=x81*x88;
  T x283=x81*x86;
  T x284=x100*x268 + x103*x271 - x104 + x107*x269 + x108 + x195*x251 + x195*x253 + x195*x255 + x195*x256 + x270*x94 + x282 - x283 - x48 - x62;
  T x285=x109*x241;
  T x286=x1*x285;
  T x287=x182 - x53;
  T x288=H[0][1]*x285;
  T x289=x17*x285;
  T x290=x186 - x206 + x207;
  T x291=x189 - x49;
  T x292=x15*x285;
  T x293=x192 - x200 + x201;
  T x294=x109*x88;
  T x295=x109*x86;
  T x296=x113*x271 - x114 + x115*x269 + x116 + x118*x270 + x121*x268 + x196 + x213*x251 + x213*x253 + x213*x255 + x213*x256 + x294 - x295 - x46 - x56;
  T x297=x123*x241;
  T x298=x1*x297;
  T x299=H[0][1]*x297;
  T x300=x17*x297;
  T x301=-x228;
  T x302=x226 + x301 + x49;
  T x303=x15*x297;
  T x304=-x219;
  T x305=x217 + x304 + x53;
  T x306=x123*x88;
  T x307=x123*x86;
  T x308=x124*x270 + x126*x268 + x128*x271 - x129 + x130*x269 + x131 + x236*x251 + x236*x253 + x236*x255 + x236*x256 + x306 - x307 + x47 + x59;
  T x309=2*a[1];
  T x310=x132*(-x134 + x309);
  T x311=x23*x310;
  T x312=x1*x311;
  T x313=H[0][1]*x311;
  T x314=x17*x311;
  T x315=x15*x311;
  T x316=x310*x43;
  T x317=x1*x316;
  T x318=H[0][1]*x316;
  T x319=x17*x316;
  T x320=x15*x316;
  T x321=x310*x63;
  T x322=x1*x321;
  T x323=x15*x321;
  T x324=x17*x321;
  T x325=x15*x64;
  T x326=x17*x64;
  T x327=H[0][1]*x321;
  T x328=x1*x64;
  T x329=x5*x64;
  T x330=x310*x81;
  T x331=x1*x330;
  T x332=H[0][1]*x330;
  T x333=x17*x330;
  T x334=x15*x330;
  T x335=x5*x79;
  T x336=x17*x75;
  T x337=x1*x77;
  T x338=x15*x71;
  T x339=x100*x329 + x103*x325 + x107*x326 + x194 + x195*x335 + x195*x336 + x195*x337 + x195*x338 + x328*x94 - x68 - x76 + x95;
  T x340=x109*x310;
  T x341=x1*x340;
  T x342=x201 + x266;
  T x343=H[0][1]*x340;
  T x344=x17*x340;
  T x345=x207 + x262;
  T x346=x15*x340;
  T x347=x113*x325 + x115*x326 + x118*x328 + x119 + x121*x329 + x212 + x213*x335 + x213*x336 + x213*x337 + x213*x338 - x66 - x80;
  T x348=x123*x310;
  T x349=x1*x348;
  T x350=x182 + x217;
  T x351=H[0][1]*x348;
  T x352=x17*x348;
  T x353=x186 + x73;
  T x354=x189 + x226;
  T x355=x15*x348;
  T x356=x192 + x69;
  T x357=x124*x328 + x125 + x126*x329 + x128*x325 + x130*x326 + x196 + x235 + x236*x335 + x236*x336 + x236*x337 + x236*x338 + x67 + x72;
  T x358=2*a[0];
  T x359=x132*(x240 - x358);
  T x360=x23*x359;
  T x361=x1*x360;
  T x362=H[0][1]*x360;
  T x363=x17*x360;
  T x364=x15*x360;
  T x365=x359*x43;
  T x366=x1*x365;
  T x367=H[0][1]*x365;
  T x368=x17*x365;
  T x369=x15*x365;
  T x370=x359*x63;
  T x371=x1*x370;
  T x372=H[0][1]*x370;
  T x373=x17*x370;
  T x374=x15*x370;
  T x375=x359*x81;
  T x376=x1*x375;
  T x377=x15*x375;
  T x378=x17*x375;
  T x379=x1*x94;
  T x380=2*x195;
  T x381=x100*x5;
  T x382=H[0][1]*x375;
  T x383=x103*x15;
  T x384=x107*x17;
  T x385=x109*x359;
  T x386=x1*x385;
  T x387=x220 + x280;
  T x388=H[0][1]*x385;
  T x389=x17*x385;
  T x390=x208 + x224;
  T x391=x229 + x277;
  T x392=x15*x385;
  T x393=x202 + x232;
  T x394=x195*x5;
  T x395=x17*x195;
  T x396=x1*x195;
  T x397=x15*x195;
  T x398=-x101 + x113*x397 + x115*x395 - x116 + x118*x396 + x121*x394 + x213*x379 + x213*x381 + x213*x383 + x213*x384 + x237 - x294 - x85;
  T x399=x123*x359;
  T x400=x1*x399;
  T x401=H[0][1]*x399;
  T x402=x17*x399;
  T x403=x227 + x91;
  T x404=x15*x399;
  T x405=x218 + x97;
  T x406=x104 + x124*x396 + x126*x394 + x128*x397 + x130*x395 - x131 + x236*x379 + x236*x381 + x236*x383 + x236*x384 + x283 - x306;
  T x407=x132*(x133 - x309);
  T x408=x23*x407;
  T x409=x1*x408;
  T x410=H[0][1]*x408;
  T x411=x17*x408;
  T x412=x15*x408;
  T x413=x407*x43;
  T x414=x1*x413;
  T x415=H[0][1]*x413;
  T x416=x17*x413;
  T x417=x15*x413;
  T x418=x407*x63;
  T x419=x1*x418;
  T x420=H[0][1]*x418;
  T x421=x17*x418;
  T x422=x15*x418;
  T x423=x407*x81;
  T x424=x1*x423;
  T x425=H[0][1]*x423;
  T x426=x17*x423;
  T x427=x15*x423;
  T x428=x109*x407;
  T x429=x1*x428;
  T x430=x15*x428;
  T x431=x17*x428;
  T x432=x113*x15;
  T x433=2*x213;
  T x434=x115*x17;
  T x435=H[0][1]*x428;
  T x436=x1*x118;
  T x437=x121*x5;
  T x438=x123*x407;
  T x439=x1*x438;
  T x440=H[0][1]*x438;
  T x441=x17*x438;
  T x442=x15*x438;
  T x443=x126*x5;
  T x444=x130*x17;
  T x445=x1*x124;
  T x446=x128*x15;
  T x447=x114 - x127 + x213*x443 + x213*x444 + x213*x445 + x213*x446 - x234 + x236*x432 + x236*x434 + x236*x436 + x236*x437 + x295;
  T x448=x132*(-x239 + x358);
  T x449=x23*x448;
  T x450=x1*x449;
  T x451=H[0][1]*x449;
  T x452=x17*x449;
  T x453=x15*x449;
  T x454=x43*x448;
  T x455=x1*x454;
  T x456=H[0][1]*x454;
  T x457=x17*x454;
  T x458=x15*x454;
  T x459=x448*x63;
  T x460=x1*x459;
  T x461=H[0][1]*x459;
  T x462=x17*x459;
  T x463=x15*x459;
  T x464=x448*x81;
  T x465=x1*x464;
  T x466=H[0][1]*x464;
  T x467=x17*x464;
  T x468=x15*x464;
  T x469=x109*x448;
  T x470=x1*x469;
  T x471=H[0][1]*x469;
  T x472=x17*x469;
  T x473=x15*x469;
  T x474=x123*x448;
  T x475=x1*x474;
  T x476=x15*x474;
  T x477=x17*x474;
  T x478=2*x236;
  T x479=H[0][1]*x474;
  T E=x1*x9 + x13*x5 + x15*x19 + x17*x21;
  if(grad) {
    (*grad)[0]=x1*x25 + x1*x39 + x13 + x15*x27 + x15*x32 + x17*x28 + x17*x36 + x26*x5 + x42*x5 - x9;
    (*grad)[1]=x1*x45 + x1*x52 + x15*x47 + x15*x59 + x17*x48 + x17*x62 - x19 + x21 + x46*x5 + x5*x56;
    (*grad)[2]=x1*x65 + x1*x78 + x15*x67 + x15*x72 + x17*x68 + x17*x76 + x5*x66 + x5*x80 + x9;
    (*grad)[3]=x1*x95 + x101*x5 + x104*x15 + x108*x17 - x21 + x5*x85 + x81*x83 + x81*x87 + x81*x89;
    (*grad)[4]=x1*x119 + x109*x110 + x109*x83 + x109*x87 + x109*x89 + x114*x15 + x116*x17 + x122*x5 - x13;
    (*grad)[5]=x1*x125 + x110*x123 + x123*x83 + x123*x87 + x123*x89 + x127*x5 + x129*x15 + x131*x17 + x19;
  }
  if(hess) {
    (*hess)(0,0)=x136*x138 + x137*x8 + x139*x18 + x140*x20 + x141*x142 + x142*x143 + x142*x147 + x142*x148 + x144*(H[0][0]*x139 + H[1][0]*x140) + x146*(H[1][1]*x140 + x145*x15) + x149*(H[1][1]*x137 + x145*x5 + 2*x33 - 2*x34) + x151*(H[1][0]*x137 + x136*x150 + 2*x29 - 2*x30) - 2*x25 + 2*x26 - 2*x39 + 2*x42;
    (*hess)(0,1)=x138*x152 + x144*(H[0][0]*x162 + H[1][0]*x157 + x164) + x146*(H[1][1]*x157 + x15*x156 + x159) + x149*(H[1][1]*x153 + x156*x5 + x161) + x151*(H[1][0]*x153 + x150*x152 + x155) + x153*x8 + x157*x20 + x162*x18 + x169;
    (*hess)(0,2)=x138*x170 + x144*(H[0][0]*x178 + H[1][0]*x175) + x146*(H[1][1]*x175 + x15*x174) + x149*(H[1][1]*x171 + x174*x5 + x177) + x151*(H[1][0]*x171 + x150*x170 + x173) + x171*x8 + x175*x20 + x178*x18 + x179;
    (*hess)(0,3)=x138*x180 + x144*(H[0][0]*x191 + H[1][0]*x185 + x193) + x146*(H[1][1]*x185 + x15*x184 + x187) + x149*(H[1][1]*x181 + x184*x5 + x190) + x151*(H[1][0]*x181 + x150*x180 + x183) + x18*x191 + x181*x8 + x185*x20 + x197;
    (*hess)(0,4)=x138*x198 + x144*(H[0][0]*x210 + H[1][0]*x205) + x146*(H[1][1]*x205 + x15*x204) + x149*(H[1][1]*x199 + x204*x5 + x209) + x151*(H[1][0]*x199 + x150*x198 + x203) + x18*x210 + x199*x8 + x20*x205 + x214;
    (*hess)(0,5)=x138*x215 + x144*(H[0][0]*x231 + H[1][0]*x223 + x233) + x146*(H[1][1]*x223 + x15*x222 + x225) + x149*(H[1][1]*x216 + x222*x5 + x230) + x151*(H[1][0]*x216 + x150*x215 + x221) + x18*x231 + x20*x223 + x216*x8 + x238;
    (*hess)(1,0)=x138*x242 + x144*(H[0][0]*x246 + H[1][0]*x245 + x164) + x146*(H[1][1]*x245 + x15*x244 + x159) + x149*(H[1][1]*x243 + x161 + x244*x5) + x151*(H[1][0]*x243 + x150*x242 + x155) + x169 + x18*x246 + x20*x245 + x243*x8;
    (*hess)(1,1)=x138*x247 + x144*(H[0][0]*x249 + H[1][0]*x250 - 2*x53 + 2*x54) + x146*(H[1][1]*x250 + x15*x254 - 2*x49 + 2*x50) + x149*(H[1][1]*x248 + x254*x5) + x151*(H[1][0]*x248 + x150*x247) + x18*x249 + x20*x250 + x248*x8 + x251*x252 + x252*x253 + x252*x255 + x252*x256 - 2*x47 + 2*x48 - 2*x59 + 2*x62;
    (*hess)(1,2)=x138*x257 + x144*(H[0][0]*x265 + H[1][0]*x261 + x267) + x146*(H[1][1]*x261 + x15*x260 + x263) + x149*(H[1][1]*x258 + x260*x5 + x264) + x151*(H[1][0]*x258 + x150*x257 + x259) + x18*x265 + x20*x261 + x258*x8 + x272;
    (*hess)(1,3)=x138*x273 + x144*(H[0][0]*x279 + H[1][0]*x276 + x281) + x146*(H[1][1]*x276 + x15*x275 + x278) + x149*(H[1][1]*x274 + x275*x5) + x151*(H[1][0]*x274 + x150*x273) + x18*x279 + x20*x276 + x274*x8 + x284;
    (*hess)(1,4)=x138*x285 + x144*(H[0][0]*x292 + H[1][0]*x289 + x293) + x146*(H[1][1]*x289 + x15*x288 + x290) + x149*(H[1][1]*x286 + x288*x5 + x291) + x151*(H[1][0]*x286 + x150*x285 + x287) + x18*x292 + x20*x289 + x286*x8 + x296;
    (*hess)(1,5)=x138*x297 + x144*(H[0][0]*x303 + H[1][0]*x300 + x305) + x146*(H[1][1]*x300 + x15*x299 + x302) + x149*(H[1][1]*x298 + x299*x5) + x151*(H[1][0]*x298 + x150*x297) + x18*x303 + x20*x300 + x298*x8 + x308;
    (*hess)(2,0)=x138*x311 + x144*(H[0][0]*x315 + H[1][0]*x314) + x146*(H[1][1]*x314 + x15*x313) + x149*(H[1][1]*x312 + x177 + x313*x5) + x151*(H[1][0]*x312 + x150*x311 + x173) + x179 + x18*x315 + x20*x314 + x312*x8;
    (*hess)(2,1)=x138*x316 + x144*(H[0][0]*x320 + H[1][0]*x319 + x267) + x146*(H[1][1]*x319 + x15*x318 + x263) + x149*(H[1][1]*x317 + x264 + x318*x5) + x151*(H[1][0]*x317 + x150*x316 + x259) + x18*x320 + x20*x319 + x272 + x317*x8;
    (*hess)(2,2)=x138*x321 + x144*(H[0][0]*x323 + H[1][0]*x324) + x146*(H[1][1]*x324 + x15*x327) + x149*(H[1][1]*x322 + x327*x5 + 2*x74) + x151*(H[1][0]*x322 + x150*x321 + 2*x70) + x18*x323 + x20*x324 + x322*x8 + 2*x325*x71 + 2*x326*x75 + 2*x328*x77 + 2*x329*x79 + 2*x65 + 2*x78;
    (*hess)(2,3)=x138*x330 + x144*(H[0][0]*x334 + H[1][0]*x333 + x172) + x146*(H[1][1]*x333 + x15*x332 + x176) + x149*(H[1][1]*x331 + x188 + x332*x5) + x151*(H[1][0]*x331 + x102 + x150*x330) + x18*x334 + x20*x333 + x331*x8 + x339;
    (*hess)(2,4)=x138*x340 + x144*(H[0][0]*x346 + H[1][0]*x344) + x146*(H[1][1]*x344 + x15*x343) + x149*(H[1][1]*x341 + x343*x5 + x345) + x151*(H[1][0]*x341 + x150*x340 + x342) + x18*x346 + x20*x344 + x341*x8 + x347;
    (*hess)(2,5)=x138*x348 + x144*(H[0][0]*x355 + H[1][0]*x352 + x356) + x146*(H[1][1]*x352 + x15*x351 + x353) + x149*(H[1][1]*x349 + x351*x5 + x354) + x151*(H[1][0]*x349 + x150*x348 + x350) + x18*x355 + x20*x352 + x349*x8 + x357;
    (*hess)(3,0)=x138*x360 + x144*(H[0][0]*x364 + H[1][0]*x363 + x193) + x146*(H[1][1]*x363 + x15*x362 + x187) + x149*(H[1][1]*x361 + x190 + x362*x5) + x151*(H[1][0]*x361 + x150*x360 + x183) + x18*x364 + x197 + x20*x363 + x361*x8;
    (*hess)(3,1)=x138*x365 + x144*(H[0][0]*x369 + H[1][0]*x368 + x281) + x146*(H[1][1]*x368 + x15*x367 + x278) + x149*(H[1][1]*x366 + x367*x5) + x151*(H[1][0]*x366 + x150*x365) + x18*x369 + x20*x368 + x284 + x366*x8;
    (*hess)(3,2)=x138*x370 + x144*(H[0][0]*x374 + H[1][0]*x373 + x172) + x146*(H[1][1]*x373 + x15*x372 + x176) + x149*(H[1][1]*x371 + x188 + x372*x5) + x151*(H[1][0]*x371 + x102 + x150*x370) + x18*x374 + x20*x373 + x339 + x371*x8;
    (*hess)(3,3)=-2*x108 + x138*x375 + x144*(H[0][0]*x377 + H[1][0]*x378 - 2*x102) + x146*(H[1][1]*x378 + x15*x382 - 2*x188) + x149*(H[1][1]*x376 + x382*x5) + x151*(H[1][0]*x376 + x150*x375) + x18*x377 + x20*x378 - 2*x282 + x376*x8 + x379*x380 + x380*x381 + x380*x383 + x380*x384;
    (*hess)(3,4)=x138*x385 + x144*(H[0][0]*x392 + H[1][0]*x389 + x393) + x146*(H[1][1]*x389 + x15*x388 + x390) + x149*(H[1][1]*x386 + x388*x5 + x391) + x151*(H[1][0]*x386 + x150*x385 + x387) + x18*x392 + x20*x389 + x386*x8 + x398;
    (*hess)(3,5)=x138*x399 + x144*(H[0][0]*x404 + H[1][0]*x402 + x405) + x146*(H[1][1]*x402 + x15*x401 + x403) + x149*(H[1][1]*x400 + x401*x5) + x151*(H[1][0]*x400 + x150*x399) + x18*x404 + x20*x402 + x400*x8 + x406;
    (*hess)(4,0)=x138*x408 + x144*(H[0][0]*x412 + H[1][0]*x411) + x146*(H[1][1]*x411 + x15*x410) + x149*(H[1][1]*x409 + x209 + x410*x5) + x151*(H[1][0]*x409 + x150*x408 + x203) + x18*x412 + x20*x411 + x214 + x409*x8;
    (*hess)(4,1)=x138*x413 + x144*(H[0][0]*x417 + H[1][0]*x416 + x293) + x146*(H[1][1]*x416 + x15*x415 + x290) + x149*(H[1][1]*x414 + x291 + x415*x5) + x151*(H[1][0]*x414 + x150*x413 + x287) + x18*x417 + x20*x416 + x296 + x414*x8;
    (*hess)(4,2)=x138*x418 + x144*(H[0][0]*x422 + H[1][0]*x421) + x146*(H[1][1]*x421 + x15*x420) + x149*(H[1][1]*x419 + x345 + x420*x5) + x151*(H[1][0]*x419 + x150*x418 + x342) + x18*x422 + x20*x421 + x347 + x419*x8;
    (*hess)(4,3)=x138*x423 + x144*(H[0][0]*x427 + H[1][0]*x426 + x393) + x146*(H[1][1]*x426 + x15*x425 + x390) + x149*(H[1][1]*x424 + x391 + x425*x5) + x151*(H[1][0]*x424 + x150*x423 + x387) + x18*x427 + x20*x426 + x398 + x424*x8;
    (*hess)(4,4)=-2*x122 + x138*x428 + x144*(H[0][0]*x430 + H[1][0]*x431) + x146*(H[1][1]*x431 + x15*x435) + x149*(H[1][1]*x429 - 2*x206 + x435*x5) + x151*(H[1][0]*x429 + x150*x428 - 2*x200) + x18*x430 + x20*x431 - 2*x211 + x429*x8 + x432*x433 + x433*x434 + x433*x436 + x433*x437;
    (*hess)(4,5)=x138*x438 + x144*(H[0][0]*x442 + H[1][0]*x441 + x200) + x146*(H[1][1]*x441 + x15*x440 + x206) + x149*(H[1][1]*x439 + x301 + x440*x5) + x151*(H[1][0]*x439 + x150*x438 + x304) + x18*x442 + x20*x441 + x439*x8 + x447;
    (*hess)(5,0)=x138*x449 + x144*(H[0][0]*x453 + H[1][0]*x452 + x233) + x146*(H[1][1]*x452 + x15*x451 + x225) + x149*(H[1][1]*x450 + x230 + x451*x5) + x151*(H[1][0]*x450 + x150*x449 + x221) + x18*x453 + x20*x452 + x238 + x450*x8;
    (*hess)(5,1)=x138*x454 + x144*(H[0][0]*x458 + H[1][0]*x457 + x305) + x146*(H[1][1]*x457 + x15*x456 + x302) + x149*(H[1][1]*x455 + x456*x5) + x151*(H[1][0]*x455 + x150*x454) + x18*x458 + x20*x457 + x308 + x455*x8;
    (*hess)(5,2)=x138*x459 + x144*(H[0][0]*x463 + H[1][0]*x462 + x356) + x146*(H[1][1]*x462 + x15*x461 + x353) + x149*(H[1][1]*x460 + x354 + x461*x5) + x151*(H[1][0]*x460 + x150*x459 + x350) + x18*x463 + x20*x462 + x357 + x460*x8;
    (*hess)(5,3)=x138*x464 + x144*(H[0][0]*x468 + H[1][0]*x467 + x405) + x146*(H[1][1]*x467 + x15*x466 + x403) + x149*(H[1][1]*x465 + x466*x5) + x151*(H[1][0]*x465 + x150*x464) + x18*x468 + x20*x467 + x406 + x465*x8;
    (*hess)(5,4)=x138*x469 + x144*(H[0][0]*x473 + H[1][0]*x472 + x200) + x146*(H[1][1]*x472 + x15*x471 + x206) + x149*(H[1][1]*x470 + x301 + x471*x5) + x151*(H[1][0]*x470 + x150*x469 + x304) + x18*x473 + x20*x472 + x447 + x470*x8;
    (*hess)(5,5)=2*x129 + x138*x474 + x144*(H[0][0]*x476 + H[1][0]*x477 + 2*x219) + x146*(H[1][1]*x477 + x15*x479 + 2*x228) + x149*(H[1][1]*x475 + x479*x5) + x151*(H[1][0]*x475 + x150*x474) + x18*x476 + x20*x477 + 2*x307 + x443*x478 + x444*x478 + x445*x478 + x446*x478 + x475*x8;
  }
  return E;
}
SSP::T SSP::energyAreaScaled(const DVec& vss,const Eigen::Matrix<int,3,1>& iss,const F H,Grad* grad,Hess* hess) const {
  T h[2][2];
  h[0][0]=H(0,0);
  h[0][1]=H(0,1);
  h[1][0]=H(1,0);
  h[1][1]=H(1,1);
  return energyAreaScaled(vss.segment<2>(iss[0]*2),vss.segment<2>(iss[1]*2),vss.segment<2>(iss[2]*2),h,grad,hess);
}
SSP::T SSP::energyAreaScaled(const Vert2& a,const Vert2& b,const Vert2& c,const T H[2][2],Grad* grad,Hess* hess) const {
  T x0=-a[0] + b[0];
  T x1=a[0] - c[0];
  T x2=H[0][1]*x1;
  T x3=H[1][1]*x0;
  T x4=H[0][0]*x1;
  T x5=H[1][0]*x0;
  T x6=x4 + x5;
  T x7=-a[1] + c[1];
  T x8=H[0][0]*x7;
  T x9=a[1] - b[1];
  T x10=H[1][0]*x9;
  T x11=H[0][1]*x7;
  T x12=H[1][1]*x9;
  T x13=x11 + x12;
  T x14=-H[1][0];
  T x15=-H[0][1];
  T x16=2*H[0][0];
  T x17=2*H[1][1];
  T x18=-2*H[0][1] - 2*H[1][0] + x16 + x17;
  T x19=H[0][1] + H[1][0];
  T x20=-x17 + x19;
  T x21=-x16 + x19;
  T x22=x14 + x15;
  T E=x0*(x2 + x3) + x1*x6 + x13*x9 + x7*(x10 + x8);
  if(grad) {
    (*grad)[0]=x0*(H[0][1] - H[1][1]) + x1*(H[0][0] + x14) - x2 - x3 + x6;
    (*grad)[1]=-x10 + x13 + x7*(-H[0][0] + H[1][0]) - x8 + x9*(H[1][1] + x15);
    (*grad)[2]=H[1][0]*x1 + x2 + 2*x3;
    (*grad)[3]=-H[1][0]*x7 - x11 - 2*x12;
    (*grad)[4]=-H[0][1]*x0 - 2*x4 - x5;
    (*grad)[5]=H[0][1]*x9 + x10 + 2*x8;
  }
  if(hess) {
    (*hess)(0,0)=x18;
    (*hess)(0,1)=0;
    (*hess)(0,2)=x20;
    (*hess)(0,3)=0;
    (*hess)(0,4)=x21;
    (*hess)(0,5)=0;
    (*hess)(1,0)=0;
    (*hess)(1,1)=x18;
    (*hess)(1,2)=0;
    (*hess)(1,3)=x20;
    (*hess)(1,4)=0;
    (*hess)(1,5)=x21;
    (*hess)(2,0)=x20;
    (*hess)(2,1)=0;
    (*hess)(2,2)=x17;
    (*hess)(2,3)=0;
    (*hess)(2,4)=x22;
    (*hess)(2,5)=0;
    (*hess)(3,0)=0;
    (*hess)(3,1)=x20;
    (*hess)(3,2)=0;
    (*hess)(3,3)=x17;
    (*hess)(3,4)=0;
    (*hess)(3,5)=x22;
    (*hess)(4,0)=x21;
    (*hess)(4,1)=0;
    (*hess)(4,2)=x22;
    (*hess)(4,3)=0;
    (*hess)(4,4)=x16;
    (*hess)(4,5)=0;
    (*hess)(5,0)=0;
    (*hess)(5,1)=x21;
    (*hess)(5,2)=0;
    (*hess)(5,3)=x22;
    (*hess)(5,4)=0;
    (*hess)(5,5)=x16;
  }
  return E;
}
}
